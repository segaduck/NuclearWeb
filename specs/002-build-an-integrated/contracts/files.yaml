openapi: 3.0.3
info:
  title: NuclearWeb File Management API
  description: File upload, download, and management endpoints
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
paths:
  /files:
    get:
      summary: List uploaded files
      description: Get paginated list of uploaded files
      tags:
        - Files
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: fileType
          in: query
          description: Filter by file type (MIME type)
          schema:
            type: string
        - name: uploadedBy
          in: query
          description: Filter by uploader user ID
          schema:
            type: integer
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UploadedFile'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Upload file
      description: Upload a new file (admin only)
      tags:
        - Files
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload (max 100MB)
                description:
                  type: string
                  maxLength: 500
                category:
                  type: string
                  maxLength: 50
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFile'
        '400':
          description: Invalid file type or size
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidType:
                  value:
                    error:
                      code: "INVALID_FILE_TYPE"
                      message: "File type not allowed"
                      details:
                        allowedTypes: ["PDF", "DOC", "DOCX", "XLS", "XLSX", "PPT", "PPTX", "PNG", "JPG", "JPEG", "GIF", "SVG", "MP4", "AVI", "MOV", "WMV", "ZIP", "RAR", "7Z"]
                fileTooLarge:
                  value:
                    error:
                      code: "FILE_TOO_LARGE"
                      message: "File size exceeds 100MB limit"
                      details:
                        maxSizeBytes: 104857600
                        uploadedSizeBytes: 150000000
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /files/{id}:
    get:
      summary: Get file metadata
      description: Get metadata for a specific file
      tags:
        - Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File metadata retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update file metadata
      description: Update file description or category (admin only)
      tags:
        - Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  maxLength: 500
                category:
                  type: string
                  maxLength: 50
      responses:
        '200':
          description: File metadata updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete file
      description: Delete an uploaded file (admin only)
      tags:
        - Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: File deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /files/{id}/download:
    get:
      summary: Download file
      description: Download file content (increments download counter)
      tags:
        - Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Attachment with original filename
              schema:
                type: string
                example: 'attachment; filename="document.pdf"'
            Content-Type:
              description: Original file MIME type
              schema:
                type: string
                example: "application/pdf"
            Content-Length:
              description: File size in bytes
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /files/categories:
    get:
      summary: List file categories
      description: Get list of all file categories in use
      tags:
        - Files
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categories retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: string
                    example: ["Documents", "Images", "Presentations"]
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UploadedFile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        fileName:
          type: string
          example: "Project_Presentation.pdf"
        fileType:
          type: string
          example: "application/pdf"
        fileExtension:
          type: string
          example: "pdf"
        fileSizeBytes:
          type: integer
          format: int64
          example: 2048576
        fileSizeMB:
          type: number
          format: float
          example: 1.95
        uploadedBy:
          type: integer
          example: 5
        uploaderName:
          type: string
          example: "John Doe"
        uploadedAt:
          type: string
          format: date-time
          example: "2025-10-03T14:30:00Z"
        description:
          type: string
          nullable: true
          example: "Q4 project presentation slides"
        category:
          type: string
          nullable: true
          example: "Presentations"
        downloadCount:
          type: integer
          example: 15

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
        pageSize:
          type: integer
        totalItems:
          type: integer
        totalPages:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
              nullable: true

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden - admin access required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

openapi: 3.0.3
info:
  title: NuclearWeb Authentication API
  description: Authentication and authorization endpoints for the integrated platform
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate user with username and password, returns JWT access token and refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  example: "john.doe"
                password:
                  type: string
                  minLength: 8
                  maxLength: 100
                  example: "SecureP@ssw0rd"
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Refresh token (HTTP-only, secure, sameSite)
              schema:
                type: string
                example: "refreshToken=abc123...; HttpOnly; Secure; SameSite=Strict; Max-Age=604800"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT access token (15 min expiry)
                    example: "eyJhbGc..."
                  tokenType:
                    type: string
                    example: "Bearer"
                  expiresIn:
                    type: integer
                    description: Access token expiry in seconds
                    example: 900
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Exchange refresh token for new access token and refresh token
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          headers:
            Set-Cookie:
              description: New refresh token (rotated)
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  tokenType:
                    type: string
                    example: "Bearer"
                  expiresIn:
                    type: integer
                    example: 900
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      summary: User logout
      description: Revoke refresh token and clear session
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        '204':
          description: Logout successful (no content)
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      summary: Get current user profile
      description: Retrieve authenticated user's profile information
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken

  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john.doe"
        displayName:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [Admin, User]
          example: "User"
        themePreference:
          type: string
          enum: [Light, Dark]
          example: "Light"
        sidebarCollapsed:
          type: boolean
          example: false
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          example: "2025-10-03T10:30:00Z"

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "INVALID_CREDENTIALS"
            message:
              type: string
              example: "Invalid username or password"
            details:
              type: object
              nullable: true

  responses:
    Unauthorized:
      description: Authentication required or invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "INVALID_CREDENTIALS"
              message: "Invalid username or password"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Request validation failed"
              details:
                username: ["Username is required"]
                password: ["Password must be at least 8 characters"]
